/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def getDefaultConfig() {
    """<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="\${config_loc}/suppressions.xml"/>
    </module>
    <!-- allows suppressing using the @SuppressWarnings("checkstyle:...") -->
    <module name="SuppressWarningsFilter"/>
    <module name="TreeWalker">
        <!-- Blocks -->
        <module name="EmptyBlock">
            <property name="option" value="statement"/>
            <property name="tokens"
                      value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT"/>
        </module>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH"/>
        </module>
        <module name="AvoidNestedBlocks"/>

        <!-- Braces -->
        <module name="LeftCurly"/>
        <module name="RightCurly"/>
        <module name="NeedBraces"/>

        <!-- Whitespace -->
        <module name="GenericWhitespace"/>
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore"/>
        <module name="NoWhitespaceAfter"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>

        <!-- Coding -->
        <module name="HiddenField"/>
        <module name="FallThrough"/>
        <module name="DeclarationOrder"/>
        <module name="CyclomaticComplexity"/>
        <module name="CovariantEquals"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="BooleanExpressionComplexity"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="UnnecessaryParentheses"/>

        <!-- Imports -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="com.beust,org.testng.collections"/>
        </module>

        <!-- Naming -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName">
            <property name="format" value="^[a-z_][a-zA-Z0-9_]*\$"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z_][a-zA-Z0-9_]*\$"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\\.[a-z][a-z0-9]*)*\$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]+\$"/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z]+\$"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]+\$"/>
        </module>

        <!-- Annotations -->
        <module name="MissingOverride"/>

        <!-- allows suppressing using the //CHECKSTYLE:ON //CHECKSTYLE:OFF -->
        <module name="SuppressionCommentFilter"/>
        <!-- to enable SuppressWarningsFilter -->
        <module name="SuppressWarningsHolder"/>
    </module>
    <module name="FileTabCharacter"/>
    <module name="RegexpSingleline">
        <property name="format" value="File \\| Settings \\| File Templates"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="Created with IntelliJ IDEA"/>
    </module>
</module>
"""
}

def getDefaultSuppressions() {
    """<?xml version="1.0"?>
<!DOCTYPE suppressions PUBLIC
        "-//Puppy Crawl//DTD Suppressions 1.1//EN"
        "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">

<suppressions>
<!--This is an example-->
<!--    <suppress checks="RegexpHeader"-->
<!--              files=".*[/\\\\]app[/\\\\]src[/\\\\]main[/\\\\]src[/\\\\]META-INF[/\\\\]java[/\\\\]org.example.app.TestActivity"/>-->
</suppressions>
"""
}

def getGeneratedConfig() {
    """<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
    <!-- allows suppressing using the @SuppressWarnings("checkstyle:...") -->
    <module name="SuppressWarningsFilter"/>
    <module name="TreeWalker">
        <!-- Blocks -->
        <module name="EmptyBlock">
            <property name="option" value="statement"/>
            <property name="tokens"
                      value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT"/>
        </module>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH"/>
        </module>
        <module name="AvoidNestedBlocks"/>

        <!-- Braces -->
        <module name="LeftCurly"/>
        <module name="RightCurly"/>
        <module name="NeedBraces"/>

        <!-- Whitespace -->
        <module name="GenericWhitespace"/>
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore"/>
        <module name="NoWhitespaceAfter"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>

        <!-- Coding -->
        <module name="HiddenField"/>
        <module name="FallThrough"/>
        <module name="DeclarationOrder"/>
        <module name="CyclomaticComplexity"/>
        <module name="CovariantEquals"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="BooleanExpressionComplexity"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="UnnecessaryParentheses"/>

        <!-- Imports -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="com.beust,org.testng.collections"/>
        </module>

        <!-- Naming -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName">
            <property name="format" value="^[a-z_][a-zA-Z0-9_]*\$"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z_][a-zA-Z0-9_]*\$"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\\.[a-z][a-z0-9]*)*\$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]+\$"/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z]+\$"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]+\$"/>
        </module>

        <!-- Annotations -->
        <module name="MissingOverride"/>

        <!-- allows suppressing using the //CHECKSTYLE:ON //CHECKSTYLE:OFF -->
        <module name="SuppressionCommentFilter"/>
        <!-- to enable SuppressWarningsFilter -->
        <module name="SuppressWarningsHolder"/>
    </module>
    <module name="FileTabCharacter"/>
    <module name="RegexpSingleline">
        <property name="format" value="File \\| Settings \\| File Templates"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="Created with IntelliJ IDEA"/>
    </module>
</module>
"""
}

allprojects {
    apply plugin: 'checkstyle'

    // init task to create sample checkstyle config
    if (project == rootProject) {
        task("initCheckstyle") {
            doLast {
                def configDir = rootProject.file('config/checkstyle')
                if (configDir.exists()) {
                    throw new GradleException("checkstyle has initialized")
                }
                configDir.mkdirs()
                rootProject.file('config/checkstyle/checkstyle.xml').tap {
                    createNewFile()
                } << defaultConfig
                rootProject.file('config/checkstyle/suppressions.xml').tap {
                    createNewFile()
                } << defaultSuppressions
            }
        }
    }

    // generate a config to run checkstyle for CI
    def version = "0.1"
    def generatedConfigFile = rootProject.file("generatedConfig/checkstyle/checkstyle-${version}.xml")
    if (!rootProject.file('config/checkstyle/checkstyle.xml').exists()) {
        if (project == rootProject) {
            logger.lifecycle("Checkstyle use config: '{}'", generatedConfigFile.path)
        }
        if (project == rootProject && !generatedConfigFile.exists()) {
            generatedConfigFile.parentFile.mkdirs()
            generatedConfigFile.tap { createNewFile() } << generatedConfig
        }
        tasks.withType(Checkstyle) {
            configFile = generatedConfigFile
        }
    } else {
        if (project == rootProject) {
            logger.lifecycle("Checkstyle use default config, it may be 'config/checkstyle/checkstyle.xml' if you not change it.")
        }
    }

    project.tasks.withType(Checkstyle) {

    }
}