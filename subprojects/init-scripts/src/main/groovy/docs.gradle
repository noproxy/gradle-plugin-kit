/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

initscript { // ScriptHandler
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:2.3.0"
    }
}

// enable to skip other project configuring to avoid possible bad gradle scripts
startParameter.configureOnDemand = true

settingsEvaluated { Settings settings ->
    if (settings.findProject(':docs')) {
        // do nothings because user setup everything in build.gradle
        println "init script skip configure because has project ':docs', dir: '" + settings.findProject(':docs').projectDir.path + "'"
        return
    }

    def docs = new File(settings.rootDir, 'docs')
    if (docs.exists()) {
        // 1. we primary use 'docs' as root
        settings.project(':').projectDir = new File(settings.rootDir, 'docs')
    } else {
        // 2. Finally, to use current dir as root
        docs = settings.rootDir
    }

    beforeProject { Project project ->
        if (project != project.rootProject) {
            return
        }

        project.logger.info("init script configure project '{}' as asciidoctor, dir: '{}'", project, project.projectDir)

        project.repositories {
            jcenter()
        }
        project.plugins.apply(org.asciidoctor.gradle.jvm.AsciidoctorJPlugin)
        project.asciidoctor {

            baseDirFollowsSourceDir()
            def sd = project.properties.getOrDefault('dir', '.')
            project.logger.info("init script configure :docs > source dir =  {}", sd)
            sourceDir sd
            sources {
                def includes = project.properties.getOrDefault('sources', 'index*.adoc')
                project.logger.info("init script configure :docs > include =  {}", includes)
                include includes
            }
            resources {
                from('downloads') {
                    into 'downloads'
                }
                from('images') {
                    into 'images'
                }
                from('.') {
                    exclude '**/*.adoc'
                    exclude 'build/'
                    into '.'
                }
            }
            attributes(
                    toc: 'left',
                    toclevels: 2,
                    'source-highlighter': 'coderay',
                    imagesdir: 'images',
                    icons: 'font',
                    sectnums: true
            )
            // translation
            attributes(
                    lang: 'zh',
                    'appendix-caption': '附录',
                    'caution-caption': '注意',
                    'example-caption': '示例',
                    'figure-caption': '图表',
                    'important-caption': '重要',
                    'last-update-label': '最后更新',
                    'listing-caption': '列表',
                    'manname-title': '名称',
                    'note-caption': '笔记',
                    'preface-title': '序言',
                    'table-caption': '表格',
                    'tip-caption': '提示',
                    'toc-title': '目录',
                    'untitled-label': '暂无标题',
                    'version-label': '版本',
                    'warning-caption': '警告',
            )
        }
    }
}



