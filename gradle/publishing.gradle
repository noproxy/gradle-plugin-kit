import org.codehaus.groovy.runtime.InvokerHelper

/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    group = "build"
    archiveClassifier.set("sources")
    from(sourceSets.main.allSource) {
        exclude("**/internal/**")
    }
    dependsOn(tasks.named("classes"))
}

task javadocJar(type: Jar) {
    group = "build"
    archiveClassifier.set("javadoc")
    def javadoc = tasks.getByName("javadoc") as Javadoc
    from(javadoc.destinationDir)
    dependsOn(javadoc)
}

task groovydocJar(type: Jar) {
    group = "build"
    archiveClassifier.set("groovydoc")
    def groovydoc = tasks.getByName("groovydoc") as Groovydoc
    from(groovydoc.destinationDir)
    dependsOn(groovydoc)
}

static def toSpacedString(String text) {
    return text.replaceAll(/\B[A-Z]/) { ' ' + it }.toLowerCase()
}

publishing {
    repositories {
        maven {
            name = "BuildDir"
            url = uri(rootProject.file("build/repo"))
        }
    }
    def configurePublishingTaskGroup = { String repoName ->
        tasks.all { task ->
            if (name.endsWith("To${repoName}Repository") || name.endsWith("To${repoName}")) {
                afterEvaluate {
                    task.group = "publishing to ${toSpacedString(repoName)}"
                }
            }
        }
    }
    repositories.all { configurePublishingTaskGroup(name.capitalize()) }
    configurePublishingTaskGroup("MavenLocal")

    // we have to `afterEvaluate` because some tasks are registered by 'com.gradle.plugin-publish' after evaluating
    // See also: https://github.com/gradle/gradle/issues/8906
    afterEvaluate {
        tasks.withType(GenerateMavenPom) {
            group = "other"
        }
        tasks.withType(GenerateModuleMetadata) {
            group = "other"
        }
    }
    publications.withType(MavenPublication).all {
        artifact(tasks.getByName("groovydocJar"))
        artifact(tasks.getByName("javadocJar"))
        artifact(tasks.getByName("sourcesJar"))
    }

}

// publish files to github release
apply plugin: "com.github.breadmoirai.github-release"

githubRelease {
    if (project.hasProperty('github.publish.token')) {
        token getProperty('github.publish.token')
    } else {
        logger.warn("Please set 'github.publish.token' in gradle.properties to publish github releases")
    }
    repo project.name
    draft byProperty("draft")
    prerelease isPreRelease()
    overwrite true
    releaseAssets jar, sourcesJar, javadocJar, groovydocJar
    body "Incubating release."
}

def isPreRelease() {
    def version = project.version.toString()
    return version.contains('-') || version.startsWith('0')
}

def byProperty(String key, boolean defaultValue = true) {
    def value = properties.getOrDefault(key, defaultValue)
    return Boolean.parseBoolean(value.toString())
}
// publish maven to github package registry
//     classpath "io.freefair.gradle:github-plugin:4.1.0"
apply plugin: "io.freefair.github.package-registry-maven-publish"

class Property {
    static void mapTo(Object extension, Map<String, String> values, String actionMessage = '') {
        values.each { key, value ->
            mapTo(extension, actionMessage, key, value)
        }
    }

    static boolean mapTo(Object extension, String actionMessage = '', String extensionPropertyName, String... projectPropertyNames) {
        assert projectPropertyNames.size() > 0
        Project project = extension.project
        for (projectPropertyName in projectPropertyNames) {
            if (project.hasProperty(projectPropertyName)) {
                InvokerHelper.setProperty(extension, extensionPropertyName, project.property(projectPropertyName))
                return true
            }
        }

        project.logger.warn("Please set '{}' in gradle.properties {}", projectPropertyNames[0], actionMessage)
        return false
    }
}

github {
    use(Property) {
        mapTo('to publish as github release', 'username', 'github.user', 'github.username')
        mapTo('to publish as github release', 'token', 'github.registry.token', 'github.publish.token')
    }
    tag = 'HEAD'
    travis = true
}

/*
Usage:

// register any publication to publish to maven repository
publishing {
    publications {
        lib(MavenPublication) {
            from components.java
        }
    }
}

// set repo name and release note to publish to github releases
githubRelease {
    repo 'name'
    body "Incubating release."
}
 */